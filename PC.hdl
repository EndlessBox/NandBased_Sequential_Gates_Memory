/**
 * A 16-bit counter load and reset control bits.
 * if (reset[t] == 1) out [t+1] = 0
 * else if (load[t] == 1) out t[t+1] = in[t]
 *   else if (inc[t] == 1) out t[t+1] = out[t] + 1
 *     else out[t+1] = out[t]
 */

CHIP PC {
    IN in[16], load, inc, reset;
    OUT out[16];

    PARTS:
    Not(in=reset, out=notReset);

    Mux16(a=outRegister, b=in, sel=load, out=outInMuxRegister);

    Mux16(a=outInMuxRegister, b=outRegister, sel=incOrReset, out=outInputMux);
    
    Way16And1(a=outInputMux, b=notReset, out=outReset);

    Inc16(in=outReset, out=outInc);
    Mux16(a=outReset, b=outInc, sel=inc, out=outFinalInc);
    


    Or(a=inc, b=reset, out=incOrReset);
    And(a=incOrReset, b=load, out=flagsOr);
    
    
    Register(in=outFinalInc, load=flagsOr, out=outRegister, out=out);

 }